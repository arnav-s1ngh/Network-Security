# -*- coding: utf-8 -*-
"""NSC-Assignment-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mYESSNJUY_UqIc-ugTaGIAB_AXB8HYn5
"""

from tabulate import tabulate

# DES tables and constants
DES_TABLES={
    "sBox":[
        [[14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7],
         [0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8],
         [4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0],
         [15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13]],
        [[15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10],
         [3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5],
         [0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15],
         [13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9]],
        [[10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8],
         [13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1],
         [13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7],
         [1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12]],
        [[7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15],
         [13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9],
         [10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4],
         [3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14]],
        [[2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9],
         [14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6],
         [4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14],
         [11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3]],
        [[12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11],
         [10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8],
         [9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6],
         [4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13]],
        [[4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1],
         [13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6],
         [1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2],
         [6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12]],
        [[13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7],
         [1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2],
         [7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8],
         [2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11]]
    ],
    "shiftTable":[1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1],
    "permutations":{
        "initial":[58,50,42,34,26,18,10,2,
                   60,52,44,36,28,20,12,4,
                   62,54,46,38,30,22,14,6,
                   64,56,48,40,32,24,16,8,
                   57,49,41,33,25,17,9,1,
                   59,51,43,35,27,19,11,3,
                   61,53,45,37,29,21,13,5,
                   63,55,47,39,31,23,15,7],
        "permChoice1":[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,
                       59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,
                       31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,
                       29,21,13,5,28,20,12,4],
        "permChoice2":[14,17,11,24,1,5,3,28,15,6,21,10,
                       23,19,12,4,26,8,16,7,27,20,13,2,
                       41,52,31,37,47,55,30,40,51,45,33,48,
                       44,49,39,56,34,53,46,42,50,36,29,32],
        "expansion":[32,1,2,3,4,5,4,5,6,7,8,9,
                     8,9,10,11,12,13,12,13,14,15,16,17,
                     16,17,18,19,20,21,20,21,22,23,24,25,
                     24,25,26,27,28,29,28,29,30,31,32,1],
        "sBoxOutput":[16,7,20,21,29,12,28,17,
                      1,15,23,26,5,18,31,10,
                      2,8,24,14,32,27,3,9,
                      19,13,30,6,22,11,4,25],
        "final":[40,8,48,16,56,24,64,32,
                 39,7,47,15,55,23,63,31,
                 38,6,46,14,54,22,62,30,
                 37,5,45,13,53,21,61,29,
                 36,4,44,12,52,20,60,28,
                 35,3,43,11,51,19,59,27,
                 34,2,42,10,50,18,58,26,
                 33,1,41,9,49,17,57,25]
    }
}

#Utility functions (xor,hexadecimal to binary,permutations,etc.)
def xorBits(a,b):
    result=""
    for i in range(len(a)):
        if a[i] == b[i]:
            result+="0"
        else:
            result+="1"
    return result

def hexToBin(hexStr):
    binStr=bin(int(hexStr,16))[2:]
    padLen=len(hexStr) * 4
    return binStr.zfill(padLen)

def binToHex(binStr):
    hexVal=hex(int(binStr,2))[2:].upper()
    padLen=len(binStr) // 4
    return hexVal.zfill(padLen)

def applyPerm(inputBits,table):
    result=""
    for i in table:
        result+=inputBits[i-1]
    return result

def shiftLeft(bits,n):
    return bits[n:]+bits[:n]

def genRoundKeys(keyBits):
    key=applyPerm(keyBits,DES_TABLES["permutations"]["permChoice1"])

    left=key[:28]
    right=key[28:]
    roundKeys=[]

    for shift in DES_TABLES["shiftTable"]:
        left=shiftLeft(left,shift)
        right=shiftLeft(right,shift)

        combined=left+right
        roundKey=applyPerm(combined,DES_TABLES["permutations"]["permChoice2"])
        roundKeys.append(roundKey)

    return roundKeys

def sBoxSub(inputBits):
    output=""
    for i in range(8):
        chunk=inputBits[i*6:(i+1)*6]

        row=int(chunk[0]+chunk[5],2)
        col=int(chunk[1:5],2)

        sBoxVal=DES_TABLES["sBox"][i][row][col]
        output+=format(sBoxVal,'04b')

    return output

def desRound(left,right,roundKey):
    expanded=applyPerm(right,DES_TABLES["permutations"]["expansion"])
    xored=xorBits(expanded,roundKey)
    substituted=sBoxSub(xored)
    permuted=applyPerm(substituted,DES_TABLES["permutations"]["sBoxOutput"])
    newRight=xorBits(left,permuted)

    return right,newRight

def padHex(msg,blockSize=16):
    if len(msg) < blockSize:
        return msg.ljust(blockSize,'0')

    if len(msg) % blockSize != 0:
        paddedLen=((len(msg)+blockSize - 1) // blockSize) * blockSize
        return msg.ljust(paddedLen,'0')

    return msg

def padKey(key,length=16):
    if len(key) < length:
        return key.ljust(length,'0')
    return key[:length]

def desProcess(inputHex,keyHex,action='encrypt',printRounds=False):
    inputBits=hexToBin(inputHex)
    keyBits=hexToBin(keyHex)

    permuted=applyPerm(inputBits,DES_TABLES["permutations"]["initial"])
    left=permuted[:32]
    right=permuted[32:]

    roundDetails=[]
    roundDetails.append({
        "Round":0,
        "Left":binToHex(left),
        "Right":binToHex(right),
        "Combined":binToHex(left+right),
        "Round Key":""
    })

    roundKeys=genRoundKeys(keyBits)
    if action == 'decrypt':
        roundKeys.reverse()

    for i in range(16):
        newLeft,newRight=desRound(left,right,roundKeys[i])

        if i == 15:
            left=newRight
            right=newLeft
        else:
            left=newLeft
            right=newRight

        roundDetails.append({
            "Round":i+1,
            "Left":binToHex(left),
            "Right":binToHex(right),
            "Combined":binToHex(left+right),
            "Round Key":binToHex(roundKeys[i])
        })

    combined=left+right
    finalOutput=applyPerm(combined,DES_TABLES["permutations"]["final"])
    finalOutputHex=binToHex(finalOutput)

    if printRounds:
        print(tabulate(roundDetails,headers="keys",tablefmt="pretty"))

    return {"final":finalOutputHex,"round_details":roundDetails}

def swapHalves(combinedHex):
    return combinedHex[8:16]+combinedHex[0:8]

if __name__ == "__main__":
    plaintext=input("Enter the message to be encrypted (hexadecimal):").strip()
    plaintext=padHex(plaintext,16)
    key=input("Enter the 64-bit key for encryption (hexadecimal):").strip()
    key=padKey(key,16)

    print("\n--- Encryption Process ---")
    encResult=desProcess(plaintext,key,action='encrypt',printRounds=True)
    ciphertext=encResult["final"]
    print(f"\nEncrypted:{ciphertext}")

    print("\n--- Decryption Process ---")
    decResult=desProcess(ciphertext,key,action='decrypt',printRounds=True)
    decrypted=decResult["final"]
    print(f"\nDecrypted:{decrypted}")

    verifyStatus="Success" if decrypted == plaintext else "Failure"
    print("\nOverall Verification:",verifyStatus)

    encRounds=encResult["round_details"]
    decRounds=decResult["round_details"]

    # Verification:
    verifyA=(encRounds[1]["Combined"] == swapHalves(decRounds[15]["Combined"]))
    verifyC=(encRounds[14]["Combined"] == swapHalves(decRounds[2]["Combined"]))

    print("\nRound Verification:")
    print("a. 1st encryption round == 15th decryption round :","Pass" if verifyA else "Fail")
    print("c. 14th encryption round == 2nd decryption round :","Pass" if verifyC else "Fail")